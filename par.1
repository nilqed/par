.\"*********************
.\"* par.1             *
.\"* for Par 1.10      *
.\"* Copyright 1993 by *
.\"* Adam M. Costello  *
.\"*********************
.\"
.\" This is nroff -man (or troff -man) code.
.\"
.TH par 1 "2 August 1993" "Par 1.10" "USER COMMANDS"
.SH NAME
par \- filter for reformatting paragraphs
.SH SYNOPSIS
.ds O \fR[\fP
.ds C \fR]\fP
.de OP
.BI \*O\ \\$1 \\$2\ \*C
..
.HP
.na
.B par
.OP version
.OP h \*Ohang\*C
.OP p prefix
.OP s suffix
.OP w width
.OP f \*Ofit\*C
.OP j \*Ojust\*C
.OP l \*Olast\*C
.OP t \*Otouch\*C
.ad
.ie t .ds Q ``
.el .ds Q ""
.ie t .ds U ''
.el .ds U ""
.SH DESCRIPTION
.de IT
.LP
\h'-\w"\\$1\ "u'\\$1\ \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8 \\$9
..
.LP
.B par
is a filter which copies its input to its
output, changing all white characters (except
newlines) to spaces, and reformatting each
paragraph. Paragraphs are delimited by blank lines.
.LP
Each output paragraph is generated from
the corresponding input lines as follows:
.RS
.LP
.IT 1. An optional prefix and/or suffix
is removed from each input line.
.IT 2. The remainder is divided into
words (delimited by spaces).
.IT 3. The words are joined into lines
to make an eye-pleasing paragraph.
.IT 4. The prefixes and suffixes are reattached.
.RE
.LP
If there are suffixes, spaces are inserted before
them so that they all end in the same column.
.SH OPTIONS
.LP
Any command line argument may begin with one
minus sign (\-) which is ignored. Generally, more
than one option may appear in a single command
line argument, but there is one exception: the
.B version
option must have a whole argument all to itself.
.TP 1i
.B version
Causes all remaining arguments to be ignored. No input
is read. \*Qpar 1.10\*U is printed on the output. Of
course, this will change in future releases of Par.
.LP
All remaining options are used to set values of variables.
Values set by command line options hold for all paragraphs
in the input. Unset variables are given default values. Any
unset variables whose default values depend on the input
paragraph are recomputed separately for each paragraph.
.LP
The approximate role of each
variable is described here. See the
.SM DETAILS
section for a much more complete
and precise description. See
.SM PARBODY
in the
.SM ENVIRONMENT
section for the definition of body characters.
.LP
The first four variables,
.IR hang ,
.IR prefix ,
.IR suffix ,
and
.IR width ,
may be set to any unsigned decimal integer less than 10000.
.TP 1i
.BI h\fR[ hang\fR]
Mainly affects the default value of
.IR prefix .
Defaults to 0. If the
.B h
option is given without a number, the
value 1 is inferred. (See also the
.B p
option.)
.TP
.BI p prefix
The first
.I prefix
characters of each output line are copied from the first
.I prefix
characters of the corresponding input line. Defaults to 0 if there are no more than
.IR hang \ +\ 1
lines in the input paragraph. Otherwise, defaults
to the length of the longest string of non-body
characters appearing at the beginning of every
line of the input paragraph except the first
.I hang
of them. (See also the
.B h
option.)
.TP
.BI s suffix
The last
.I suffix
characters of each output line are copied from the last
.I suffix
characters of the corresponding input line. Defaults to 0
if there is no more than 1 line in the input paragraph.
Otherwise, defaults to the length of the longest string
of non-body characters appearing at the end of every
line of the input paragraph, after said string has
been stripped of all initial spaces but the last.
.TP
.BI w width
No line in the output paragraph will contain more than
.I width
characters, not including the
trailing newlines. Defaults to 72.
.LP
The remaining four variables,
.IR fit,
.IR just,
.IR last,
and
.IR touch,
may be set to either 0 or 1. If the number is
absent in the option, the value 1 is inferred.
.TP 1i
.BI f\fR[ fit\fR]
If
.I fit
is 1 and
.I just
is 0,
.B par
will try to make the lines in the output paragraph as
nearly the same length as possible, even if it means making
the paragraph narrower. Defaults to 0. (See also the
.B j
option.)
.TP
.BI j\fR[ just\fR]
If
.I just
is 1,
.B par
justifies the paragraph, inserting spaces between words
so that all lines in the output paragraph have length
.I width
(except the last, if
.I last
is 0).
.I fit
has no effect if
.I just
is 1. Defaults to 0. (See also the
.BR w ,
.BR l ,
and
.B f
options.)
.TP
.BI l\fR[ last\fR]
If
.I last
is 1,
.B par
tries to make the last line of the output paragraph
about the same length as the others. Defaults to 0.
.TP
.BI t\fR[ touch\fR]
Has no effect if
.I suffix
is 0 or
.I just
is 1. Otherwise, if
.I touch
is 0, all lines in the output paragraph have length
.IR width .
If
.I touch
is 1, then the length of the lines is
decreased until the suffixes touch the body
of the paragraph. Defaults to the logical
.SM OR
of
.I fit
and
.IR last .
(See also the
.BR s ,
.BR j ,
.BR w ,
.BR f ,
and
.B l
options.)
.LP
If the value of any variable is set more
than once, the last value is used. When
unset variables are assigned default values,
.I hang
is assigned before
.IR prefix ,
and
.I fit
and
.I last
are assigned before
.I touch
(because of the dependencies).
.LP
It is an error if
.I width
<=
.I prefix
+
.IR suffix .
.SH ENVIRONMENT
.TP 1i
.SM PARINIT
If set,
.B par
will read command line options from
.SM PARINIT
before it reads them from the command line.
.TP
.SM PARBODY
All and only the characters appearing in the value of
.SM PARBODY
count as body characters (which are used
for determining the default values of
.I prefix
and
.IR suffix ).
The underscore is an escape character, which
may begin the following escape sequences:
.RS 2i
.IT __\ = an underscore
.IT _s\ = a space
.IT _A\ = all upper case characters
.IT _a\ = all lower case characters
.IT _0\ = all decimal digits
.IT _x\fIhh\fP\ = the character represented
by the two hexadecimal digits
.I hh
(which may be upper or lower case)
.RE
.IP "" 1i
A good value for
.SM PARBODY
might be \*Q_a_A.\*U, but it depends on the application.
.LP
If a
.SM NUL
character appears in the value of an environment variable,
it and the rest of the string will not be seen by
.BR par .
.SH DETAILS
.LP
The white characters are the space, formfeed, newline,
carriage return, tab, and vertical tab. Every white
character in the input (unless it is a newline) is
changed into a space immediately after it has been read.
.LP
Lines are terminated by newline characters, but the
newlines are not considered to be included in the lines.
If the last character of the input is a non-newline,
then a newline will be inferred immediately after
it (but if the input is empty, no newline will be
inferred; the number of input lines will be 0). Thus,
the input can always be viewed as a sequence of lines.
.LP
.SM NUL
characters in the input are invisible,
just as if they weren't there at all.
.LP
A line is called
.I blank
if and only if it contains only spaces, or is
empty. A subsequence of non-blank lines is called
.I maximal
if and only if there is no non-blank
line immediately before or after it.
.LP
The process described in the remainder of this section
is applied independently to each maximal subsequence of
non-blank input lines. (Each blank line of the input
is transformed into an empty line on the output).
.LP
After the values of the variables are determined (see the
.SM OPTIONS
section), the first
.I prefix
characters and the last
.I suffix
characters of each input line are removed and remembered.
It is an error for any line to contain fewer than
.IR prefix \ +\  suffix
characters.
.LP
The remaining text is treated as a sequence of
characters, not lines. The text is broken into
words, which are delimited by spaces. That is, a
.I word
is a maximal sub-sequence of non-spaces. If
there is at least one word, and the first word
is preceeded only by spaces, then the first
word is expanded to include those spaces.
.LP
Let
.I L
=
.I width
\-
.I prefix
\-
.IR suffix .
.LP
Every word which contains more than
.I L
characters is broken, after each
.IR L th
character, into multiple words.
.LP
These words are reassembled, preserving their
order, into lines. If
.I just
is 0, adjacent words within a line are separated by
a single space, and line breaks are chosen so that
the paragraph satisfies the following properties:
.RS 1i
.IT 1. No line contains more than
.I L
characters.
.IT 2. If
.I fit
is 1, the difference between the lengths of the
shortest and longest lines is as small as possible.
.IT 3. The shortest line is as long as
possible, subject to properties 1 and 2.
.IT 4. Let
.I target
be
.I L
if
.I fit
is 0, or the length of the longest line if
.I fit
is 1. The sum of the squares of the differences between
.I target
and the lengths of the lines is as small as
possible, subject to properties 1, 2, and 3.
.RE
.RS 0.5i
.LP
If
.I last
is 0, then the last line does not count as a line
for the purposes of properties 2, 3, and 4 above.
.LP
If all the words fit on a single line, then
the properties as worded above don't make much
sense. In that case, no line breaks are inserted.
.RE
.LP
If
.I just
is 1, then adjacent words within a line are separated by
one space plus zero or more extra spaces, the value of
.I fit
is disregarded, and line breaks are chosen so that
the paragraph satisfies the following properties:
.RS 1i
.IT 1. Every line contains exactly
.I L
characters.
.IT 2. The largest inter-word gap is as
small as possible, subject to property 1.
.IT 3. The sum of the squares of the numbers
of extra spaces required in each inter-word gap is
as small as possible, subject to properties 1 and 2.
.RE
.RS 0.5i
.LP
If
.I last
is 0, then the last line does not count as a
line for the purposes of property 1, and it
does not require or contain any extra spaces.
.LP
Extra spaces are distributed as uniformly as
possible among the inter-word gaps in each line.
.LP
Some paragraphs are impossible to justify,
because they contain words too long relative to
.IR L .
If this is the case, it is considered an error (see the
.SM DIAGNOSTICS
section).
.RE
.LP
If the number of lines in the
resulting paragraph is less than
.IR hang ,
then empty lines are added at the end
to bring the number of lines up to
.IR hang .
.LP
If
.I just
is 0 and
.I touch
is 1, then
.I L
is changed to be the length of the longest line.
.LP
If
.I suffix
is not 0, then each line is padded at the
end with spaces to bring its length up to
.IR L .
.LP
To each line is prepended
.I prefix
characters. Let
.I n
be the number of input lines. The
characters which are prepended to the
.IR i th
line are chosen as follows:
.RS
.LP
.IT 1. If
.I i
<=
.IR n ,
then the characters are copied from the ones
that were removed from the beginning of the
.IR n th
input line.
.IT 2. If
.I i
>
.I n
>
.IR hang ,
then the characters are copied from the ones that were
removed from the beginning of the last input line.
.IT 3. If
.I i
>
.I n
and
.I n
<=
.IR hang ,
then the characters are all spaces.
.RE
.LP
Then to each line is appended
.I suffix
characters. The characters which are appended to the
.IR i th
line are chosen as follows:
.RS
.LP
.IT 1. If
.I i
<=
.IR n ,
then the characters are copied from the
ones that were removed from the end of the
.IR n th
input line.
.IT 2. If
.I i
>
.I n
> 0, then the characters are copied from the ones that
were removed from the end of the last input line.
.IT 3. If
.I n
= 0, then the characters are all spaces.
.RE
.LP
Finally, the lines are printed to the output.
.SH DIAGNOSTICS
.LP
If there are no errors,
.B par
returns
.SM EXIT_SUCCESS
(see
.BR <stdlib.h> ).
.LP
If there is an error, then an error
message will be printed to the output, and
.B par
will return
.SM EXIT_FAILURE\s0\.
If the error is local to a single paragraph, then the
preceeding paragraphs will have been output before the error
was detected. Line numbers in error messages are local to
the input paragraph in which the error occurred. All error
messages begin with "par error:" on a line by itself.
.LP
Of course, trying to print an error message would be
futile if an error resulted from an output function, so
.B par
doesn't bother doing any error checking on output functions.
.SH EXAMPLES
.de VS
.RS -0.5i
.LP
.nf
.ps -1
.cs R 20
..
.de VE
.cs R
.ps
.fi
.RE
..
.de CM
\&\*Q\fB\\$1\fP\\*U:
..
.LP
The superiority of
.BR par 's
dynamic programming algorithm over a
greedy algorithm (such as the one used by
.BR fmt )
can be seen in the following example:
.LP
Original paragraph (note that
each line begins with 8 spaces):
.VS
        We the people of the United States,
        in order to form a more perfect union,
        establish justice,
        insure domestic tranquility,
        provide for the common defense,
        promote the general welfare,
        and secure the blessing of liberty
        to ourselves and our posterity,
        do ordain and establish the Constitution
        of the United States of America.
.VE
.LP
After a greedy algorithm with width = 39:
.VS
        We the people of the United
        States, in order to form a more
        perfect union, establish
        establish justice, insure
        domestic tranquility, provide
        for the common defense, promote
        the general welfare, and secure
        the blessing of liberty to
        ourselves and our posterity, do
        ordain and establish the
        Constitution of the United
        States of America.
.VE
.LP
After
.CM "par 39"
.VS
        We the people of the United
        States, in order to form a
        more perfect union, establish
        justice, insure domestic
        tranquility, provide for the
        common defense, promote the
        general welfare, and secure
        the blessing of liberty to
        ourselves and our posterity,
        do ordain and establish the
        Constitution of the United
        States of America.
.VE
.LP
The line breaks chosen by
.B par
are clearly more eye-pleasing.
.LP
.B par
is most useful in conjunction with the text-filtering
features of an editor, such as the ! commands of
.BR vi.
.LP
The rest of this section is a series of
before-and-after pictures showing some typical uses of
.BR par .
.LP
Before:
.VS
        /*   We the people of the United States, */
        /* in order to form a more perfect union, */
        /* establish justice, */
        /* insure domestic tranquility, */
        /* provide for the common defense, */
        /* promote the general welfare, */
        /* and secure the blessing of liberty */
        /* to ourselves and our posterity, */
        /* do ordain and establish the Constitution */
        /* of the United States of America. */
.VE
.LP
After
.CM "par 59"
.VS
        /*   We the people of the United States, in      */
        /* order to form a more perfect union, establish */
        /* justice, insure domestic tranquility, provide */
        /* for the common defense, promote the general   */
        /* welfare, and secure the blessing of liberty   */
        /* to ourselves and our posterity, do ordain     */
        /* and establish the Constitution of the United  */
        /* States of America.                            */
.VE
.LP
Or after
.CM "par 59f"
.VS
        /*   We the people of the United States,  */
        /* in order to form a more perfect union, */
        /* establish justice, insure domestic     */
        /* tranquility, provide for the common    */
        /* defense, promote the general welfare,  */
        /* and secure the blessing of liberty to  */
        /* ourselves and our posterity, do ordain */
        /* and establish the Constitution of the  */
        /* United States of America.              */
.VE
.LP
Or after
.CM "par 59l"
.VS
        /*   We the people of the United States, in      */
        /* order to form a more perfect union, establish */
        /* justice, insure domestic tranquility,         */
        /* provide for the common defense, promote       */
        /* the general welfare, and secure the           */
        /* blessing of liberty to ourselves and our      */
        /* posterity, do ordain and establish the        */
        /* Constitution of the United States of America. */
.VE
.LP
Or after
.CM "par 59lf"
.VS
        /*   We the people of the United States,  */
        /* in order to form a more perfect union, */
        /* establish justice, insure domestic     */
        /* tranquility, provide for the common    */
        /* defense, promote the general welfare,  */
        /* and secure the blessing of liberty     */
        /* to ourselves and our posterity, do     */
        /* ordain and establish the Constitution  */
        /* of the United States of America.       */
.VE
.LP
Or after
.CM "par 59lft0"
.VS
        /*   We the people of the United States,         */
        /* in order to form a more perfect union,        */
        /* establish justice, insure domestic            */
        /* tranquility, provide for the common           */
        /* defense, promote the general welfare,         */
        /* and secure the blessing of liberty            */
        /* to ourselves and our posterity, do            */
        /* ordain and establish the Constitution         */
        /* of the United States of America.              */
.VE
.LP
Or after
.CM "par 59j"
.VS
        /*   We  the people  of  the  United States,  in */
        /* order to form a more perfect union, establish */
        /* justice, insure domestic tranquility, provide */
        /* for the  common defense, promote  the general */
        /* welfare, and  secure the blessing  of liberty */
        /* to ourselves and our posterity, do ordain and */
        /* establish  the  Constitution  of  the  United */
        /* States of America.                            */
.VE
.LP
Or after
.CM "par 59jl"
.VS
        /*   We  the   people  of  the   United  States, */
        /* in   order    to   form   a    more   perfect */
        /* union,  establish  justice,  insure  domestic */
        /* tranquility, provide for  the common defense, */
        /* promote  the  general   welfare,  and  secure */
        /* the  blessing  of  liberty to  ourselves  and */
        /* our  posterity, do  ordain and  establish the */
        /* Constitution of the United States of America. */
.VE
.LP
Before:
.VS
        Preamble      We the people of the United States,
        to the US     in order to form
        Constitution  a more perfect union,
                      establish justice,
                      insure domestic tranquility,
                      provide for the common defense,
                      promote the general welfare,
                      and secure the blessing of liberty
                      to ourselves and our posterity,
                      do ordain and establish
                      the Constitution
                      of the United States of America.
.VE
.LP
After
.CM "par 52h3"
.VS
        Preamble      We the people of the United
        to the US     States, in order to form a
        Constitution  more perfect union, establish
                      justice, insure domestic
                      tranquility, provide for the
                      common defense, promote the
                      general welfare, and secure
                      the blessing of liberty to
                      ourselves and our posterity,
                      do ordain and establish the
                      Constitution of the United
                      States of America.
.VE
.LP
Before:
.VS
         1  We the people of the United States,
         2  in order to form a more perfect union,
         3  establish justice,
         4  insure domestic tranquility,
         5  provide for the common defense,
         6  promote the general welfare,
         7  and secure the blessing of liberty
         8  to ourselves and our posterity,
         9  do ordain and establish the Constitution
        10  of the United States of America.
.VE
.LP
After
.CM "par 59p12l"
.VS
         1  We the people of the United States, in order to
         2  form a more perfect union, establish justice,
         3  insure domestic tranquility, provide for the
         4  common defense, promote the general welfare,
         5  and secure the blessing of liberty to ourselves
         6  and our posterity, do ordain and establish the
         7  Constitution of the United States of America.
.VE
.SH SEE ALSO
.LP
.B par.doc
.SH LIMITATIONS
.LP
If you like two spaces between sentences, too
bad. Differentiating between periods that end
sentences and periods used in abbreviations
is a complex problem beyond the scope of this
simple filter. Consider the following tough case:
.VS
        I calc'd the approx.
        Fermi level to 3 sig. digits.
.VE
.LP
Suppose that that should be reformatted to:
.VS
        I calc'd the approx. Fermi
        level to three sig. digits.
.VE
.LP
The program has to decide whether to put 1 or 2 spaces
between \*Qapprox.\*U and \*QFermi\*U. There is no obvious
hint from the original paragraph because there was a line
break between them, and \*QFermi\*U begins with a capital
letter. The program would apparently have to understand
English grammar to determine that the sentence does not
end there (and then it would only work for English text).
.LP
If you use tabs, you probably won't like the way
.B par
handles
(or doesn't handle) them. It turns them into spaces. I
didn't bother trying to make sense of tabs because they
don't make sense to begin with. Not everyone's terminal
has the same tab settings, so text files containing
tabs are sometimes mangled. In fact, almost every text
file containing tabs gets mangled when something is
inserted at the beginning of each line (when quoting
e-mail or commenting out a section of a shell script, for
example), making them a pain to edit. In my opinion, the
world would be a nicer place if everyone stopped using
tabs (so I'm doing my part by not supporting them in
.BR par .)
.LP
There is currently no way for the length of the
output prefix to differ from the length of the
input prefix. Ditto for the suffix. I may consider
adding this capability in a future release, but
right now I'm not sure how I'd want it to work.
.LP
Currently,
.B par
is best suited to operating on one paragraph
at a time. I delimit paragraphs by blank lines
only because it is easy. It might be nice if
.B par
could delimit paragraphs in other ways, but so far I haven't
thought of any general-purpose, clean set of criteria.
.SH BUGS
.LP
If I knew of any bugs, I wouldn't release the package. Of
course, there may be bugs that I haven't yet discovered.
.LP
If you find any bugs, or if you have
any suggestions, please send e-mail to:
.RS
.LP
amc@ecl.wustl.edu
.RE
.LP
or send paper mail to:
.RS
.LP
.nf
Adam M. Costello
Campus Box 1045
Washington University
One Brookings Dr.
St. Louis, MO 63130
USA
.fi
.RE
.LP
Note that both addresses could
change anytime after June 1994.
.LP
When reporting a bug, please include the exact input and
command line options used, and the version number of
.BR par ,
so that I can reproduce it.
