  *********************
  * par.doc           *
  * for Par 1.40      *
  * Copyright 1993 by *
  * Adam M. Costello  *
  *********************


    Par 1.40 is a package containing:

       + This doc file.
       + A man page based on this doc file.
       + The ANSI C source for the filter "par".


Contents

    Contents
    File List
    Rights and Responsibilities
    Release Notes
    Compilation
    Synopsis
    Description
   *Quick Start
    Terminology
    Options
    Environment
    Details
    Diagnostics
    Examples
    Limitations
    Bugs


File List

    The Par 1.40 package is always distributed with at least the following
    files:

        buffer.c
        buffer.h
        charset.c
        charset.h
        failf.c
        failf.h
        par.1
        par.c
        par.doc
        protoMakefile
        reformat.c
        reformat.h

    Each file is a text file which identifies itself on the second line, and
    identifies the version of Par to which it belongs on the third line,
    so you can always tell which file is which, even if the files have been
    renamed.

    The file "par.1" is a man page for the filter par (not to be confused
    with the package Par, which contains the source code for par).  "par.1"
    is based on this doc file, and conveys much (not all) of the same
    information, but "par.doc" is the definitive documentation for both par
    and Par.


Rights and Responsibilities

    The files listed in the Files List section above are each Copyright 1993
    by Adam M. Costello (henceforth "I").

    I grant everyone permission to use these files in any way, subject to
    the following two restrictions:

     1) No one may distribute modifications of any of the files unless I am
        the one who modified them.

     2) No one may distribute any one of the files unless it is accompanied
        by all of the other files.

    I cannot disallow the distribution of patches, but I would prefer that
    users send me suggestions for changes so that I can incorporate them
    into future versions of Par.  See the Bugs section for my addresses.

    Though I have tried to make sure that Par is free of bugs, I make no
    guarantees about its soundness.  Therefore, I am not responsible for any
    damage resulting from the use of these files.


Release Notes

    Each entry below describes changes since the previous version.

    Par 1.00 released 25 July 1993
        The first release.

    Par 1.10 released 2 August 1993
        Fixed the following bugs:
            In reformat.c I used sprintf() but forgot to #include <stdio.h>.
            I forgot to verify that <width> > <prefix> + <suffix>.
            The first word of a paragraph was expanded to include initial
            white characters, not just spaces, contrary to par.doc.
            Some invalid options were not complained about.
            NUL characters in the input were not handled.
            A pointer foul-up in freelines() in par.c could cause a crash.
        Added the following features:
            The f, j, and t options.
            The PARBODY environment variable.
            Multiple options may be concatenated into a single argument.
        Removed the m option:
            Its function is better performed by the f and t options.
            Normally I would avoid making incompatible changes, unless I
            were doing a complete overhaul of the whole program, in which
            case I'd make the version number 2.00 to alert users to possible
            incompatibilities.  However, in this particular instance I
            allowed an incompatibility in a minor upgrade because version
            1.00 was distributed to only four people.
        Changed the handling of white characters:
            par now changes all of them (except newlines) to spaces as they
            are read.  This is another incompatible change, excused for the
            same reason.
        Made all error messages begin with "par error:".

    Par 1.20 released 10 August 1993
        Since Par 1.10 was distributed to no one, I've made some more
            incompatible changes in Par 1.20.
        Added the following features:
            The d option.
            Paragraphs are now separated by vacant lines, not just blank
                lines.
            <hang> now affects not only <prefix> but also <suffix>.

    Par 1.30 released 18 August 1993
        Since Par 1.20 was posted to comp.sources.misc, I have made only
            backward-compatible changes in Par 1.30.
        Fixed the following bugs:
            One wrong word in par.c sometimes caused par to crash.  Thanks
                go to vogelke@c-17igp.wpafb.af.mil (Contr Karl Vogel) for
                sending me an input file that caused a crash.
            Too-long words were chopped up before the first word in a
                paragraph was expanded to include initial spaces, allowing
                impossibility #1 to occur.  The order of the two operations
                has been reversed.  Thanks go to splat@deakin.oz.au (Andrew
                Cashin) for reporting the error message.
        Added the following features:
            The g option (motivated by suggestions from several people).
            The q option (inspired by a suggestion from splat@deakin.oz.au
                (Andrew Cashin)).
            The R option (my attempt to squash a bad idea from Par 1.00).
            The PARQUOTE environment variable (comes with the q option).
            The PARPROTECT environment variable (inspired by a suggestion
                from dennisf@se01.elk.miles.com (Dennis Flaherty)).
        Altered the terminology:
            Several terms have been added, and the meaning of some terms
            has been slightly modified.  This is a change in the language
            used to describe par's behavior, not a change in par's actual
            behavior.
        Added a clean target to protoMakefile (suggested by hlj@posix.com
            (Hal Jespersen)).

    Par 1.31 released 7 September 1993
        The version number is 1.31 rather than 1.40 because all added
            features are really just enhancements of existing features.
        Fixed the following bug:
            In par.doc, in the example of a paragraph produced by a greedy
                algorithm, the word "establish" appeared twice in a row.
                Thanks go to daniel@astro.rug.nl (Daniel Kussendrager) for
                first pointing this out.  (The example is now even better
                because the paragraph looks even worse than before.)
        Added the following features:
            A usage message to accompany command line or environment
                variable syntax errors (first suggested by
                qarl@ecl.wustl.edu (Karl Stiefvater)).
            The help and c options.
            The B, P, and Q options, which render PARBODY, PARPROTECT, and
                PARQUOTE no longer necessary.  They are retained, though,
                for compatibility and convenience.
            The _b, _q, and _Q escape sequences for charset syntax.
        Added the term "charset syntax".
        Isolated the character set code in charset.c and charset.h.

    Par 1.32 released 13 September 1993
        Fixed the following bugs:
            par could crash when the + or - operator was used with the B,
                P, and Q options.  Thanks go to splat@deakin.oz.au (Andrew
                Cashin) for reporting this.
            If <quote> were 1 and two adjacent lines had different
                quoteprefixes, one of which was a prefix of the other,
                and only the line with the shorter quoteprefix contained
                a non-quote character, then nothing would be altered.
                According to par.doc 1.31, this was correct, but since
                neither line is vacant, I consider this a bug in the design
                of the <quote> feature.  Now the longer quoteprefix will be
                truncated to match the shorter one, and will therefore be
                vacant.  Thanks go to splat@deakin.oz.au (Andrew Cashin) for
                asking about this.
        Made slight changes to the documentation.

    Par 1.40 released 10 Oct 1993
        Fixed the following bugs:
            The phrase "containing at least two lines" was left out of the
                definition of "vacant line" in par.doc and par.1, although
                the code implemented the correct definition.  (The phrase
                now appears in the definition of "order <k> bodiless line".)
            There was still a flaw in the design of the <quote> feature.  If
                two adjacent lines had quoteprefixes neither of which was a
                prefix of the other, no line would be inserted between them,
                possibly causing other inserted lines not to be vacant.  Now
                it should be true that every line inserted or truncated by
                the <quote> feature will turn out to be vacant.
            When <hang> began affecting the default value of <suffix> (as of
                Par 1.20), it should also have begun affecting the choice of
                source of characters for the suffixes of lines in OPs.
        Added the following features:
            The i option (suggested by barrett@ee.und.ac.za (Alan Barrett)).
            The e option (inspired by a suggestion from tim@ben.dciem.dnd.ca
                (Tim Pointing)).
            The r option.
            The p, s, and w options are now accepted without numbers.
            par no longer gives up so easily when choosing default values
                for <prefix> and <suffix> for an IP with less than <hang>+2
                lines, nor when choosing the source of characters for the
                prefix and suffix of the <i>th output line when <i> > <n>
                and <n> <= <hang>.  These are incompatible changes, but I
                cannot imagine anyone preferring the old behavior.
        Altered the terminology:
            Added the terms "bodiless line" (a generalization of "vacant
                line"), "fallback prelen", and "fallback suflen".
        Made miscellaneous changes to the documentation, including the
            addition of the Quick Start section.


Compilation

    To compile par, you need an ANSI C compiler.  Copy protoMakefile to
    Makefile and edit it, following the instructions in the comments.  Then
    use make (or the equivalent on your system) to compile par.

    If you have no make, compile each .c file into an object file and link
    all the object files together by whatever method works on your system.
    Then go look for a version of make that works on your system, since it
    will come in handy in the future.

    If your compiler warns you about a pointer to a constant being converted
    to a pointer to a non-constant in line 521 of reformat.c, ignore it.
    Your compiler (like mine) is in error.  What it thinks is a pointer to
    a constant is actually a pointer to a pointer to a constant, which is
    something quite different.  The conversion is legal, and I don't think a
    correct ANSI C compiler would complain.

    If your compiler generates any other warnings that you think are
    legitimate, please tell me about them (see the Bugs section).

    Note that all variables in par are either constant or automatic (or
    both), which means that par can be made reentrant (if your compiler
    supports it).  Given the right operating system, it should be possible
    for several par processes to share the same code space and the same data
    space (but not the same stack, of course) in memory.


Synopsis
    par [help] [version] [B<op><set>] [P<op><set>] [Q<op><set>] [h[<hang>]]
        [p[<prefix>]] [r[<repeat>]] [s[<suffix>]] [w[<width>]] [c[<cap>]]
        [d[<div>]] [e[<expel>]] [f[<fit>]] [g[<guess>]] [i[<invis>]]
        [j[<just>]] [l[<last>]] [q[<quote>]] [R[<Report>]] [t[<touch>]]

    Things enclosed in [square brackets] are optional.  Things enclosed in
    <angle brackets> are parameters.


Description

    par is a filter which copies its input to its output, changing all white
    characters (except newlines) to spaces, and reformatting each paragraph.
    Paragraphs are separated by protected, blank, and bodiless lines (see
    the Terminology section for definitions), and optionally delimited by
    indentation (see the d option in the Options section).

    Each output paragraph is generated from the corresponding input
    paragraph as follows:

     1) An optional prefix and/or suffix is removed from each input line.
     2) The remainder is divided into words (separated by spaces).
     3) The words are joined into lines to make an eye-pleasing paragraph.
     4) The prefixes and suffixes are reattached.

     If there are suffixes, spaces are inserted before them so that they all
     end in the same column.


Quick Start

    par is necessarily complex.  For those who wish to use it immediately
    and understand it later, assign the following environment variables:

        PARBODY    = ._A_a

        PARINIT    = Rgqr

        PARQUOTE   = _s>|

    The greater-than sign and the vertical bar in the value of PARQUOTE
    will probably have to be escaped or quoted to prevent your shell from
    interpreting them.


Terminology

    Miscellaneous terms:

        charset syntax
            A way of representing a set of characters as a string.  The set
            includes exactly those characters which appear in the string,
            except that the underscore (_) is an escape character.  Whenever
            it appears, it must begin one of the following escape sequences:

                   __ = an underscore
                   _s = a space
                   _b = a backslash (\)
                   _q = a single quote (')
                   _Q = a double quote (")
                   _A = all upper case letters
                   _a = all lower case letters
                   _0 = all decimal digits
                 _xhh = the character represented by the two hexadecimal
                        digits hh (which may be upper or lower case)

            The NUL character must not appear in the string but it may be
            included in the set with the _x00 sequence.

        error
            A condition which causes par to abort.  See the Diagnostics
            section.

        IP  Input paragraph.

        OP  Output paragraph.

        parameter
            A symbol which may take on unsigned integral values.  There are
            several parameters whose values affect the behavior of par.
            Parameters can be assigned values using command line options.


    Types of characters:

        alphanumeric character
            An upper case letter, lower case letter, or decimal digit.

        body character
            A member of the set of characters defined by the PARBODY
            environment variable (see the Environment section).

        protective character
            A member of the set of characters defined by the PARPROTECT
            environment variable (see the Environment section).

        quote character
            A member of the set of characters defined by the PARQUOTE
            environment variable (see the Environment section).

        terminal character
            A period, question mark, exclamation point, or colon.

        white character
            A space, formfeed, newline, carriage return, tab, or vertical
            tab.

    Functions:

        comprelen
            The comprelen of a non-empty sequence of lines is the length
            of the longest string of non-body characters appearing at the
            beginning of every line in the set.

        comsuflen
            Given a non-empty sequence <S> of lines, let <p> be the
            comprelen of <S>.  Let <T> be the set of lines which result from
            stripping the first <p> characters from each line in <S>.  Let
            <c> be the longest string of non-body characters appearing at
            the end of every line in <T>.  Strip <c> of all initial spaces
            except the last.  The length of <c> is the comsuflen of <S>.

        fallback prelen (suflen)
            The fallback prelen (suflen) of an IP is: the comprelen
            (comsuflen) of the IP, if the IP contains at least two lines;
            otherwise, the comprelen (comsuflen) of the block containing the
            IP, if the block contains at least two lines; otherwise, the
            length of the longer of the prefixes (suffixes) of the bodiless
            lines just above and below the block, if the segment containing
            the block has any bodiless lines; otherwise, 0.  (See below for
            the definitions of block, segment, and bodiless line.)

        quoteprefix
            The quoteprefix of a line is the longest string of quote
            characters appearing at the beginning of the line, after this
            string has been stripped of any trailing spaces.

    Types of lines:

        blank line
            An empty line, or a line whose first character is not protective
            and which contains only spaces.

        protected line
            An input line whose first character is protective.

        bodiless line
            A line which is order <k> bodiless for some <k>.

        order <k> bodiless line
            There is no such thing as an order 0 bodiless line.  Suppose
            <S> is a a contiguous subsequence of a segment (see below)
            containing at least two lines, containing no order <k>-1
            bodiless lines, bounded above and below by order <k>-1 bodiless
            lines and/or the beginning/end of the segment.  Let <p> and <s>
            be the comprelen and comsuflen of <S>.  Any member of <S> which,
            if stripped of its first <p> and last <s> characters, would be
            blank (or, if the parameter <repeat> is non-zero, would consist
            of the same character repeated at least <repeat> times), is
            order <k> bodiless.  The first <p> characters of the bodiless
            line comprise its prefix; the last <s> characters comprise its
            suffix.  The character which repeats in the middle is called its
            repeat character.  If the middle is empty, the space is taken to
            be its repeat character.

        vacant line
            A bodiless line whose repeat character is the space.

        superfluous line
            Only blank and vacant lines may be superfluous.  If contiguous
            vacant lines lie at the beginning or end of a segment, they are
            all superfluous.  But if they lie between two non-vacant lines
            within a segment, then all are superfluous except one--the one
            which contains the fewest non-spaces.  In case of a tie, the
            first of the tied lines is chosen.  Similarly, if contiguous
            blank lines lie outside of any segments at the beginning or end
            of the input, they are all superfluous.  But if they lie between
            two segments and/or protected lines, then all are superfluous
            except the first.

    Groups of lines:

        segment
            A contiguous sequence of input lines containing no protected or
            blank lines, bounded above and below by protected lines, blank
            lines, and/or the beginning/end of the input.

        block
            A contiguous subsequence of a segment containing no bodiless
            lines, bounded above and below by bodiless lines and/or the
            beginning/end of the segment.

    Types of words:

        capitalized word
            If the parameter <cap> is 0, a capitalized word is one which
            contains at least one alphanumeric character, whose first
            alphanumeric character is not a lower case letter.  If <cap>
            is 1, every word is considered a capitalized word.  (See the c
            option in the Options section.)

        curious word
            A word which contains a terminal character <c> such that there
            are no alphanumeric characters in the word after <c>, but there
            is at least one alphanumeric character in the word before <c>.


Options

    Any command line argument may begin with one minus sign (-) which is
    ignored.  Generally, more than one option may appear in a single command
    line argument, but there are exceptions:  The help, version, B, P, and Q
    options must have whole arguments all to themselves.

    help        Causes all remaining arguments to be ignored.  No input
                is read.  A usage message is printed on the output briefly
                describing the options used by par.

    version     Causes all remaining arguments to be ignored.  No input is
                read.  "par 1.40" is printed on the output.  Of course, this
                will change in future releases of Par.

    B<op><set>  <op> is a single character, either an equal sign (=), a
                plus sign (+), or a minus sign (-). <set> is a string using
                charset syntax.  If <op> is an equal sign, the set of body
                characters is set to the character set defined by <set>.  If
                <op> is a plus/minus sign, the characters in the set defined
                by <set> are added/removed to/from the existing set of body
                characters defined by the PARBODY environment variable and
                any previous B options.  It is okay to add characters that
                are already in the set or to remove characters that are not
                in the set.

    P<op><set>  Just like the B option, except that it applies to the set of
                protective characters.

    Q<op><set>  Just like the B option, except that it applies to the set of
                quote characters.

    All remaining options are used to set values of parameters.  Values set
    by command line options hold for all paragraphs.  Unset parameters are
    given default values.  Any parameters whose default values depend on
    the IP (namely <prefix> and <suffix>), if left unset, are recomputed
    separately for each paragraph.

    The approximate role of each parameter is described here.  See the
    Details section for the rest of the story.

    The first five parameters, <hang>, <prefix>, <repeat>, <suffix>, and
    <width>, may be set to any unsigned decimal integer less than 10000.

    h[<hang>]   Mainly affects the default values of <prefix> and <suffix>.
                Defaults to 0.  If the h option is given without a number,
                the value 1 is inferred.  (See also the p and s options.)

    p[<prefix>] The first <prefix> characters of each line of the OP
                are copied from the first <prefix> characters of the
                corresponding line of the IP.  If there are more than
                <hang>+1 lines in the IP, the default value is the comprelen
                of all the lines in the IP except the first <hang> of them.
                Otherwise, the default value is the fallback prelen of the
                IP, plus, if <quote> is 1, the number of quote characters
                immediately following the first fallback prelen characters
                of the last line of the IP.  If the p option is given
                without a number, <prefix> is unset, even if it had been set
                earlier.  (See also the h and q options.)

    r[<repeat>] If <repeat> is non-zero, bodiless lines have the number of
                instances of their repeat characters increased or decreased
                until the length of the line is <width>.  The exact value of
                <repeat> affects the definition of bodiless line.  Defaults
                to 0.  If the r option is given without a number, the value
                3 is inferred.  (See also the w option.)

    s[<suffix>] The last <suffix> characters of each line of the OP
                are copied from the last <suffix> characters of the
                corresponding line of the IP.  If there are more than
                <hang>+1 lines in the IP, the default value is the comsuflen
                of all the lines in the IP except the first <hang> of them.
                Otherwise, the default value is the fallback suflen of the
                IP.  If the s option is given without a number, <suffix> is
                unset, even if it had been set earlier.  (See also the h
                option.)

    w[<width>]  No line in the OP may contain more than <width> characters,
                not including the trailing newlines.  Defaults to 72.  If
                the w option is given without a number, the value 79 is
                inferred.

    The remaining eleven parameters, <cap>, <div>, <expel>, <fit>, <guess>,
    <invis>, <just>, <last>, <quote>, <Report>, and <touch>, may be set to
    either 0 or 1.  If the number is absent in the option, the value 1 is
    inferred.

    c[<cap>]    If <cap> is 1, all words are considered capitalized.  This
                currently affects only the application of the g option.
                Defaults to 0.

    d[<div>]    If <div> is 0, each block becomes an IP.  If <div> is 1,
                each block is subdivided into IPs as follows:  Let <p> be
                the comprelen of the block.  Let a line's status be 1 if its
                (<p>+1)st character is a space, 0 otherwise.  Every line
                in the block whose status is the same as the status of the
                first line will begin a new paragraph.  Defaults to 0.

    e[<expel>]  If <expel> is 1, superfluous lines withheld from the output.
                Defaults to 0.

    f[<fit>]    If <fit> is 1 and <just> is 0, par tries to make the lines
                in the OP as nearly the same length as possible, even if it
                means making the OP narrower.  Defaults to 0.  (See also the
                j option.)

    g[<guess>]  If <guess> is 1, then when par is choosing line breaks,
                whenever it encounters a curious word followed by a
                capitalized word, it takes one of two special actions.
                If the two words are separated by a single space in the
                input, they will be merged into one word with an embedded
                non-breaking space.  If the two words are separated by more
                than one space, or by a line break, par will insure that
                they are separated by two spaces, or by a line break, in the
                output.  Defaults to 0.

    i[<invis>]  If <invis> is 1, then vacant lines inserted because <quote>
                is 1 are invisible; that is, they are not output.  If
                <quote> is 0, <invis> has no effect.  Defaults to 0.  (See
                also the q option.)

    j[<just>]   If <just> is 1, par justifies the OP, inserting spaces
                between words so that all lines in the OP have length
                <width> (except the last, if <last> is 0).  Defaults to 0.
                (See also the w, l, and f options.)

    l[<last>]   If <last> is 1, par tries to make the last line of the OP
                about the same length as the others.  Defaults to 0.

    q[<quote>]  If <quote> is 1, then before each segment is scanned for
                bodiless lines, par supplies vacant lines between different
                quotation nesting levels as follows:  For each pair of
                adjacent lines in the segment (scanned from the top down)
                which have different quoteprefixes, one of two actions is
                taken.  If <invis> is 0, and either line consists entirely
                of quote characters and spaces (or is empty), that line is
                truncated to the longest common prefix of the two lines
                (both are truncated if both qualify).  Otherwise, a line
                consisting of the longest common prefix of the two lines is
                inserted between them.  <quote> also affects the default
                value of <prefix>.  Defaults to 0.  (See also the p and i
                options.)

    R[<Report>] If <Report> is 1, it is considered an error for an input
                word to contain more than <L> = (<width> - <prefix> -
                <suffix>) characters.  Otherwise, such words are chopped
                after each <L>th character into shorter words.  Defaults
                to 0.  It is recommended that this option be included in
                PARINIT (see the Environment section).

    t[<touch>]  Has no effect if <suffix> is 0 or <just> is 1.  Otherwise,
                if <touch> is 0, all lines in the OP have length <width>.
                If <touch> is 1, the length of the lines is decreased until
                the suffixes touch the body of the OP.  Defaults to the
                logical OR of <fit> and <last>.  (See also the s, j, w, f,
                and l options.)

    If the value of any parameter is set more than once, the last value is
    used.  When unset parameters are assigned default values, <hang> and
    <quote> are assigned before <prefix>, and <fit> and <last> are assigned
    before <touch> (because of the dependencies).

    It is an error if <width> <= <prefix> + <suffix>.


Environment

    PARBODY     Determines the initial set of body characters (which are
                used for determining comprelens and comsuflens), using
                charset syntax.  If PARBODY is not set, the set of body
                characters is initially empty.

    PARINIT     If set, par will read command line arguments from PARINIT
                before it reads them from the command line.  Within
                the value of PARINIT, arguments are separated by white
                characters.

    PARPROTECT  Determines the set of protective characters, using charset
                syntax.  If PARPROTECT is not set, the set of protective
                characters is initially empty.

    PARQUOTE    Determines the set of quote characters, using charset
                syntax.  If PARQUOTE is not set, the set of quote characters
                initially contains only the greater-than sign (>) and the
                space.

    If a NUL character appears in the value of an environment variable, it
    and the rest of the string will not be seen by par.


Details

    Lines are terminated by newline characters, but the newlines are not
    considered to be included in the lines.  If the last character of the
    input is a non-newline, a newline will be inferred immediately after
    it (but if the input is empty, no newline will be inferred; the number
    of input lines will be 0).  Thus, the input can always be viewed as a
    sequence of lines.

    Protected lines are copied unchanged from the input to the output.  All
    other input lines, as they are read, have any NUL characters removed,
    and every white character (except newlines) turned into a space.

    Blank lines in the input are transformed into empty lines in the output.

    If <repeat> is 0, all bodiless lines are vacant, and they are all simply
    stripped of trailing spaces before being output.  If <repeat> is 1, only
    vacant lines whose suffixes have length 0 are treated that way; other
    bodiless lines have the number of instances of their repeat characters
    increased or decreased until the length of the line is <width>.

    If <expel> is 1, superfluous lines are not output.  If <quote> and
    <invis> are both 1, there may be invisible lines; they are not output.

    The input is divided into segments, which are divided into blocks,
    which are divided into IPs.  The exact process depends on the values of
    <quote> and <div> (see q and d in the Options section).  The remainder
    of this section describes the process which is applied independently to
    each IP to construct the corresponding OP.

    After the values of the parameters are determined (see the Options
    section), the first <prefix> characters and the last <suffix> characters
    of each input line are removed and remembered.  It is an error for any
    line to contain fewer than <prefix> + <suffix> characters.

    The remaining text is treated as a sequence of characters, not lines.
    The text is broken into words, which are separated by spaces.  That is,
    a word is a maximal sub-sequence of non-spaces.  If <guess> is 1, some
    words might be merged (see g in the Options section).  The first word
    includes any spaces that preceed it on the same line.

    Let <L> = <width> - <prefix> - <suffix>.

    If <Report> is 0, some words may get chopped up at this point (see R in
    the Options section).

    The words are reassembled, preserving their order, into lines.  If
    <just> is 0, adjacent words within a line are separated by a single
    space (or sometimes two if <guess> is 1), and line breaks are chosen so
    that the paragraph satisfies the following properties:

         1) No line contains more than <L> characters.

         2) If <fit> is 1, the difference between the lengths of the
            shortest and longest lines is as small as possible.

         3) The shortest line is as long as possible, subject to properties
            1 and 2.

         4) Let <target> be <L> if <fit> is 0, or the length of the longest
            line if <fit> is 1.  The sum of the squares of the differences
            between <target> and the lengths of the lines is as small as
            possible, subject to properties 1, 2, and 3.

        If <last> is 0, the last line does not count as a line for the
        purposes of properties 2, 3, and 4 above.

        If all the words fit on a single line, the properties as worded
        above don't make much sense.  In that case, no line breaks are
        inserted.

    If <just> is 1, adjacent words within a line are separated by one space
    (or sometimes two if <guess> is 1) plus zero or more extra spaces.  The
    value of <fit> is disregarded, and line breaks are chosen so that the
    paragraph satisfies the following properties:

         1) Every line contains exactly <L> characters.

         2) The largest inter-word gap is as small as possible, subject
            to property 1.  (An inter-word gap consists only of the extra
            spaces, not the regular spaces.)

         3) The sum of the squares of the lengths of the inter-word gaps is
            as small as possible, subject to properties 1 and 2.

        If <last> is 0, the last line does not count as a line for the
        purposes of property 1, and it does not require or contain any extra
        spaces.

        Extra spaces are distributed as uniformly as possible among the
        inter-word gaps in each line.

        In a justified paragraph, every line must contain at least two
        words, but that's not always possible to accomplish.  If the
        paragraph cannot be justified, it is considered an error.

    If the number of lines in the resulting paragraph is less than <hang>,
    empty lines are added at the end to bring the number of lines up to
    <hang>.

    If <just> is 0 and <touch> is 1, <L> is changed to be the length of the
    longest line.

    If <suffix> is not 0, each line is padded at the end with spaces to
    bring its length up to <L>.

    To each line is prepended <prefix> characters.  Let <n> be the number of
    lines in the IP, let <fp> be the fallback prelen of the IP, and let <fs>
    be the fallback suflen of the IP.  The characters which are prepended to
    the <i>th line are chosen as follows:

     1) If <i> <= <n>, the characters are copied from the ones that were
        removed from the beginning of the <n>th input line.

     2) If <i> > <n> > <hang>, the characters are copied from the ones that
        were removed from the beginning of the last input line.

     3) If <i> > <n> and <n> <= <hang>, the first min(<fp>,<prefix>) of
        the characters are copied from the ones that were removed from the
        beginning of the last input line, and the rest are all spaces.

    Then to each line is appended <suffix> characters.  The characters which
    are appended to the <i>th line are chosen as follows:

     1) If <i> <= <n>, the characters are copied from the ones that were
        removed from the end of the nth input line.

     2) If <i> > <n> > <hang>, the characters are copied from the ones that
        were removed from the end of the last input line.

     3) If <i> > <n> and <n> <= <hang>, the first min(<fs>,<suffix>) of
        the characters are copied from the ones that were removed from the
        beginning of the last input line, and the rest are all spaces.

    Finally, the lines are printed to the output as the OP.


Diagnostics

    If there are no errors, par returns EXIT_SUCCESS (see <stdlib.h>).

    If there is an error, an error message will be printed to the output,
    and par will return EXIT_FAILURE.  If the error is local to a single
    paragraph, the preceeding paragraphs will have been output before
    the error was detected.  Line numbers in error messages are local to
    the IP in which the error occurred.  All error messages begin with
    "par error:" on a line by itself.  Error messages concerning command
    line or environment variable syntax are accompanied by the same usage
    message that the help option produces.

    Of course, trying to print an error message would be futile if an error
    resulted from an output function, so par doesn't bother doing any error
    checking on output functions.


Examples

    The superiority of par's dynamic programming algorithm over a greedy
    algorithm (such as the one used by fmt) can be seen in the following
    example:

    Original paragraph:

        We the people of the United States,
        in order to form a more perfect union,
        establish justice,
        insure domestic tranquility,
        provide for the common defense,
        promote the general welfare,
        and secure the blessing of liberty
        to ourselves and our posterity,
        do ordain and establish the Constitution
        of the United States of America.

    After a greedy algorithm with width = 39:

        We the people of the United
        States, in order to form a more
        perfect union, establish
        justice, insure domestic
        tranquility, provide for the
        common defense, promote the
        general welfare, and secure the
        blessing of liberty to
        ourselves and our posterity, do
        ordain and establish the
        Constitution of the United
        States of America.

    After "par 39":

        We the people of the United    
        States, in order to form a     
        more perfect union, establish  
        justice, insure domestic       
        tranquility, provide for the   
        common defense, promote the    
        general welfare, and secure    
        the blessing of liberty to     
        ourselves and our posterity,   
        do ordain and establish the    
        Constitution of the United     
        States of America.             

    The line breaks chosen by par are clearly more eye-pleasing.

    par is most useful in conjunction with the text-filtering features of an
    editor, such as the ! commands of vi.

    The rest of this section is a series of before-and-after pictures
    showing some typical uses of par.  In all cases, no environment
    variables are set.

    Before:

        /*   We the people of the United States, */
        /* in order to form a more perfect union, */
        /* establish justice, */
        /* insure domestic tranquility, */
        /* provide for the common defense, */
        /* promote the general welfare, */
        /* and secure the blessing of liberty */
        /* to ourselves and our posterity, */
        /* do ordain and establish the Constitution */
        /* of the United States of America. */

    After "par 59":

        /*   We the people of the United States, in      */
        /* order to form a more perfect union, establish */
        /* justice, insure domestic tranquility, provide */
        /* for the common defense, promote the general   */
        /* welfare, and secure the blessing of liberty   */
        /* to ourselves and our posterity, do ordain     */
        /* and establish the Constitution of the United  */
        /* States of America.                            */

    Or after "par 59f":

        /*   We the people of the United States,  */
        /* in order to form a more perfect union, */
        /* establish justice, insure domestic     */
        /* tranquility, provide for the common    */
        /* defense, promote the general welfare,  */
        /* and secure the blessing of liberty to  */
        /* ourselves and our posterity, do ordain */
        /* and establish the Constitution of the  */
        /* United States of America.              */

    Or after "par 59l":

        /*   We the people of the United States, in      */
        /* order to form a more perfect union, establish */
        /* justice, insure domestic tranquility,         */
        /* provide for the common defense, promote       */
        /* the general welfare, and secure the           */
        /* blessing of liberty to ourselves and our      */
        /* posterity, do ordain and establish the        */
        /* Constitution of the United States of America. */

    Or after "par 59lf":

        /*   We the people of the United States,  */
        /* in order to form a more perfect union, */
        /* establish justice, insure domestic     */
        /* tranquility, provide for the common    */
        /* defense, promote the general welfare,  */
        /* and secure the blessing of liberty     */
        /* to ourselves and our posterity, do     */
        /* ordain and establish the Constitution  */
        /* of the United States of America.       */

    Or after "par 59lft0":

        /*   We the people of the United States,         */
        /* in order to form a more perfect union,        */
        /* establish justice, insure domestic            */
        /* tranquility, provide for the common           */
        /* defense, promote the general welfare,         */
        /* and secure the blessing of liberty            */
        /* to ourselves and our posterity, do            */
        /* ordain and establish the Constitution         */
        /* of the United States of America.              */

    Or after "par 59j":

        /*   We  the people  of  the  United States,  in */
        /* order to form a more perfect union, establish */
        /* justice, insure domestic tranquility, provide */
        /* for the  common defense, promote  the general */
        /* welfare, and  secure the blessing  of liberty */
        /* to ourselves and our posterity, do ordain and */
        /* establish  the  Constitution  of  the  United */
        /* States of America.                            */

    Or after "par 59jl":

        /*   We  the   people  of  the   United  States, */
        /* in   order    to   form   a    more   perfect */
        /* union,  establish  justice,  insure  domestic */
        /* tranquility, provide for  the common defense, */
        /* promote  the  general   welfare,  and  secure */
        /* the  blessing  of  liberty to  ourselves  and */
        /* our  posterity, do  ordain and  establish the */
        /* Constitution of the United States of America. */

    Before:

        Preamble      We the people of the United States,
        to the US     in order to form
        Constitution  a more perfect union,
                      establish justice,
                      insure domestic tranquility,
                      provide for the common defense,
                      promote the general welfare,
                      and secure the blessing of liberty
                      to ourselves and our posterity,
                      do ordain and establish
                      the Constitution
                      of the United States of America.

    After "par 52h3":

        Preamble      We the people of the United
        to the US     States, in order to form a
        Constitution  more perfect union, establish
                      justice, insure domestic
                      tranquility, provide for the
                      common defense, promote the
                      general welfare, and secure
                      the blessing of liberty to
                      ourselves and our posterity,
                      do ordain and establish the
                      Constitution of the United
                      States of America.

    Before:

         1  We the people of the United States,
         2  in order to form a more perfect union,
         3  establish justice,
         4  insure domestic tranquility,
         5  provide for the common defense,
         6  promote the general welfare,
         7  and secure the blessing of liberty
         8  to ourselves and our posterity,
         9  do ordain and establish the Constitution
        10  of the United States of America.

    After "par 59p12l":

         1  We the people of the United States, in order to
         2  form a more perfect union, establish justice,
         3  insure domestic tranquility, provide for the
         4  common defense, promote the general welfare,
         5  and secure the blessing of liberty to ourselves
         6  and our posterity, do ordain and establish the
         7  Constitution of the United States of America.

    Before:

        > > We the people
        > > of the United States,
        > > in order to form a more perfect union,
        > > establish justice,
        > > ensure domestic tranquility,
        > > provide for the common defense,
        >
        > Promote the general welfare,
        > and secure the blessing of liberty
        > to ourselves and our posterity,
        > do ordain and establish
        > the Constitution of the United States of America.

    After "par 52":

        > > We the people of the United States, in
        > > order to form a more perfect union,
        > > establish justice, ensure domestic
        > > tranquility, provide for the common
        > > defense,
        >
        > Promote the general welfare, and secure
        > the blessing of liberty to ourselves and
        > our posterity, do ordain and establish
        > the Constitution of the United States of
        > America.

    Before:

        >   We the people
        > of the United States,
        > in order to form a more perfect union,
        > establish justice,
        > ensure domestic tranquility,
        > provide for the common defense,
        >   Promote the general welfare,
        > and secure the blessing of liberty
        > to ourselves and our posterity,
        > do ordain and establish
        > the Constitution of the United States of America.

    After "par 52d":

        >   We the people of the United States,
        > in order to form a more perfect union,
        > establish justice, ensure domestic
        > tranquility, provide for the common
        > defense,
        >   Promote the general welfare, and secure
        > the blessing of liberty to ourselves and
        > our posterity, do ordain and establish
        > the Constitution of the United States of
        > America.

    Before:

        # 1. We the people of the United States.
        # 2. In order to form a more perfect union.
        # 3. Establish justice, ensure domestic
        #    tranquility.
        # 4. Provide for the common defense
        # 5. Promote the general welfare.
        # 6. And secure the blessing of liberty
        #    to ourselves and our posterity.
        # 7. Do ordain and establish the Constitution.
        # 8. Of the United States of America.

    After "par 37p13dh":

        # 1. We the people of the
        #    United States.
        # 2. In order to form a more
        #    perfect union.
        # 3. Establish justice,
        #    ensure domestic
        #    tranquility.
        # 4. Provide for the common
        #    defense
        # 5. Promote the general
        #    welfare.
        # 6. And secure the blessing
        #    of liberty to ourselves
        #    and our posterity.
        # 7. Do ordain and establish
        #    the Constitution.
        # 8. Of the United States of
        #    America.

    Before:

        /*****************************************/
        /*   We the people of the United States, */
        /* in order to form a more perfect union, */
        /* establish justice, insure domestic    */
        /* tranquility,                          */
        /*                                       */
        /*                                       */
        /*   [ provide for the common defense, ] */
        /*   [ promote the general welfare,    ] */
        /*   [ and secure the blessing of liberty ] */
        /*   [ to ourselves and our posterity, ] */
        /*   [                                 ] */
        /*                                       */
        /* do ordain and establish the Constitution */
        /* of the United States of America.       */
        /******************************************/

    After "par 42r":

        /********************************/
        /*   We the people of the       */
        /* United States, in order to   */
        /* form a more perfect union,   */
        /* establish justice, insure    */
        /* domestic tranquility,        */
        /*                              */
        /*                              */
        /*   [ provide for the common ] */
        /*   [ defense, promote the   ] */
        /*   [ general welfare, and   ] */
        /*   [ secure the blessing of ] */
        /*   [ liberty to ourselves   ] */
        /*   [ and our posterity,     ] */
        /*   [                        ] */
        /*                              */
        /* do ordain and establish the  */
        /* Constitution of the United   */
        /* States of America.           */
        /********************************/

    Or after "par 42re":

        /********************************/
        /*   We the people of the       */
        /* United States, in order to   */
        /* form a more perfect union,   */
        /* establish justice, insure    */
        /* domestic tranquility,        */
        /*                              */
        /*   [ provide for the common ] */
        /*   [ defense, promote the   ] */
        /*   [ general welfare, and   ] */
        /*   [ secure the blessing of ] */
        /*   [ liberty to ourselves   ] */
        /*   [ and our posterity,     ] */
        /*                              */
        /* do ordain and establish the  */
        /* Constitution of the United   */
        /* States of America.           */
        /********************************/

    Before:

        Joe Public writes:
        > Jane Doe writes:
        > >
        > >
        > > I can't find the source for uncompress.
        > Oh no, not again!!!
        >
        >
        > Isn't there a FAQ for this?
        >
        >
        That wasn't very helpful, Joe. Jane,
        just make a link from uncompress to compress.

    After "par 40q":

        Joe Public writes:

        > Jane Doe writes:
        >
        >
        > > I can't find the source for
        > > uncompress.
        >
        > Oh no, not again!!!
        >
        >
        > Isn't there a FAQ for this?
        >

        That wasn't very helpful, Joe.
        Jane, just make a link from
        uncompress to compress.

    Or after "par 40qe":

        Joe Public writes:

        > Jane Doe writes:
        >
        > > I can't find the source for
        > > uncompress.
        >
        > Oh no, not again!!!
        >
        > Isn't there a FAQ for this?

        That wasn't very helpful, Joe.
        Jane, just make a link from
        uncompress to compress.

    Or after "par 40qi":

        Joe Public writes:
        > Jane Doe writes:
        > >
        > >
        > > I can't find the source for
        > > uncompress.
        > Oh no, not again!!!
        >
        >
        > Isn't there a FAQ for this?
        >
        >
        That wasn't very helpful, Joe.
        Jane, just make a link from
        uncompress to compress.

    Or after "par 40qie":

        Joe Public writes:
        > Jane Doe writes:
        > > I can't find the source for
        > > uncompress.
        > Oh no, not again!!!
        >
        > Isn't there a FAQ for this?
        That wasn't very helpful, Joe.
        Jane, just make a link from
        uncompress to compress.

    Before:

        I sure hope there's still room
        in Dr. Jones' section of archaeology.
        I've heard he's the bestest.  [sic]

    After "par 50g":

        I sure hope there's still room in
        Dr. Jones' section of archaeology.  I've
        heard he's the bestest. [sic]

    Or after "par 50gc":

        I sure hope there's still room in
        Dr. Jones' section of archaeology.  I've
        heard he's the bestest.  [sic]

    Before:

        John writes:
        : Mary writes:
        : + Anastasia writes:
        : + > Hi all!
        : + Hi Ana!
        : Hi Ana & Mary!
        Please unsubscribe me from alt.hello.

    After "par Q+:+ q":

        John writes:

        : Mary writes:
        :
        : + Anastasia writes:
        : +
        : + > Hi all!
        : +
        : + Hi Ana!
        :
        : Hi Ana & Mary!

        Please unsubscribe me from alt.hello.


Limitations

    The <guess> feature guesses wrong in cases like the following:

        I calc'd the approx.
        Fermi level to 3 sig. digits.

    With <guess> = 1, par will incorrectly assume that "approx." ends a
    sentence.  If the input were:

        I calc'd the approx. Fermi
        level to 3 sig. digits.

    then par would refuse to put a line break between "approx." and "Fermi"
    in the output, mainly to avoid creating the first situation (in case the
    paragraph were to be fed back through par again).  This non-breaking
    space policy does come in handy for cases like "Mr. Johnson" and
    "Jan. 1", though.

    The <guess> feature only goes one way.  par can preserve wide sentence
    breaks in a paragraph, or remove them, but it can't insert them if they
    aren't already in the input.

    If you use tabs, you probably won't like the way par handles (or doesn't
    handle) them.  It turns them into spaces.  I didn't bother trying to
    make sense of tabs because they don't make sense to begin with.  Not
    everyone's terminal has the same tab settings, so text files containing
    tabs are sometimes mangled.  In fact, almost every text file containing
    tabs gets mangled when something is inserted at the beginning of each
    line (when quoting e-mail or commenting out a section of a shell script,
    for example), making them a pain to edit.  In my opinion, the world
    would be a nicer place if everyone stopped using tabs (so I'm doing my
    part by not supporting them in par).  If you find yourself editing a
    file containing tabs, the first thing you should do is run the whole
    file through expand, a standard UNIX command (if there is such a thing)
    that replaces tabs with spaces while preserving the appearance of the
    file.  If you're not in a UNIX environment, then hopefully someone
    has ported expand to your system.  (Thanks to ets1@cs.wustl.edu (Eric
    T. Stuebe) for showing me the light about tabs.)

    There is currently no way for the length of the output prefix to differ
    from the length of the input prefix.  Ditto for the suffix.  I may
    consider adding this capability in a future release, but right now I'm
    not sure how I'd want it to work.


Bugs

    If I knew of any bugs, I wouldn't release the package.  Of course, there
    may be bugs that I haven't yet discovered.

    If you find any bugs (in the program or in the documentation), or if you
    have any suggestions, please send e-mail to:

        amc@ecl.wustl.edu

    or send paper mail to:

        Adam M. Costello
        Campus Box 1045
        Washington University
        One Brookings Dr.
        St. Louis, MO 63130
        USA

    Note that both addresses could change anytime after June 1994.

    When reporting a bug, please include the exact input and command line
    options used, and the version number of par, so that I can reproduce it.
