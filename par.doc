  *********************
  * par.doc           *
  * for Par 1.20      *
  * Copyright 1993 by *
  * Adam M. Costello  *
  *********************


    Par 1.20 is a package containing:

       + This doc file.
       + A man page based on this doc file.
       + The ANSI C source for the filter "par".


Contents

    Contents
    File List
    Rights and Responsibilities
    Release Notes
    Compilation
    Synopsis
    Description
    Terms
    Options
    Environment
    Details
    Diagnostics
    Examples
    Limitations
    Bugs


File List

    The Par 1.20 package is always distributed with at least the following
    files:

        buffer.h
        buffer.c
        failf.h
        failf.c
        par.1
        par.c
        par.doc
        protoMakefile
        reformat.h
        reformat.c

    Each file is a text file which identifies itself on the second line, and
    identifies the version of Par to which it belongs on the third line,
    so you can always tell which file is which even if the files have been
    renamed.

    The file "par.1" is a man page for the filter par (not to be confused
    with the package Par, which contains the source code for par). "par.1"
    is based on this doc file, and conveys much (not all) of the same
    information, but "par.doc" is the definitive documentation for both par
    and Par.


Rights and Responsibilities

    The files listed in the Files List section above are each Copyright 1993
    by Adam M. Costello (henceforth "I").

    I grant everyone permission to use these files in any way, subject to
    the following two restrictions:

     1) No one may distribute modifications of any of the files unless I am
        the one who modified them.

     2) No one may distribute any one of the files unless it is accompanied
        by all of the other files.

    I cannot disallow the distribution of patches, but I would prefer that
    users send me suggestions for changes so that I can incorporate them
    into future versions of Par. See the Bugs section for my addresses.

    Though I have tried to make sure that Par is free of bugs, I make no
    guarantees about its soundness. Therefore, I am not responsible for any
    damage resulting from the use of these files.


Release Notes

    Each entry below describes changes since the previous version.

    Par 1.00 released 25 July 1993
        The first release.

    Par 1.10 released 2 August 1993
        Fixed the following bugs:
            In reformat.c I used sprintf() but forgot to #include <stdio.h>.
            I forgot to verify that <width> > <prefix> + <suffix>.
            The first word of a paragraph was expanded to include initial
            white characters, not just spaces, contrary to par.doc.
            Some invalid options were not complained about.
            NUL characters in the input were not handled.
            A pointer foul-up in freelines() in par.c could cause a crash.
        Added the following features:
            Multiple options may be concatenated into a single argument.
            The PARBODY environment variable.
            The j option.
            The f option.
            The t option.
        Removed the m option, since its function is better performed by the
            f and t options. Normally I would avoid making incompatible
            changes, unless I were doing a complete overhaul of the whole
            program, in which case I'd make the version number 2.00 to alert
            users to possible incompatibilities. However, in this particular
            instance I allowed an incompatibility in a minor upgrade because
            version 1.00 was distributed to only four people.
        Changed the handling of white characters: par now changes all of
            them (except newlines) to spaces as they are read. This is
            another incompatible change, excused for the same reason.
        Made all error messages begin with "par error:".

    Par 1.20 released 10 Aug 1993
        Since Par 1.10 was distributed to no one, I've made some more
          incompatible change in Par 1.20.
        Paragraphs are now delimited by vacant rather than blank lines.
        <hang> now affects not only <prefix> but also <suffix>.
        Added the d[<div>] option.


Compilation

    To compile par, you need an ANSI C compiler. Copy protoMakefile to
    Makefile and edit it, following the instructions in the comments. Then
    use make (or the equivalent on your system) to compile par.

    If you have no make, compile each .c file into an object file and link
    all the object files together by whatever method works on your system.
    Then go look for a version of make that works on your system, since it
    will come in handy in the future.

    If your compiler warns you about a pointer to a constant being converted
    to a pointer to a non-constant in line 404 of reformat.c, ignore it.
    Your compiler (like mine) is in error. What it thinks is a pointer to
    a constant is actually a pointer to a pointer to a constant, which is
    something quite different. The conversion is legal, and I don't think a
    correct ANSI C compiler would complain.

    If your compiler generates any other warnings that you think are
    legitimate, please tell me about them (see the Bugs section).

    Note that all variables in par are either constant or automatic (or
    both), which means that par can be made reentrant (if your compiler
    supports it). Given the right operating system, it should be possible
    for several par processes to share the same code space in memory.


Synopsis

    par [version] [h[<hang>]] [p<prefix>] [s<suffix>] [w<width>]
        [d[<div>]] [f[<fit>]] [j[<just>]] [l[<last>]] [t[<touch>]]

    Things enclosed in [square brackets] are optional. Things enclosed in
    <angle brackets> are variables.


Description

    par is a filter which copies its input to its output, changing all white
    characters (except newlines) to spaces, and reformatting each paragraph.
    Paragraphs are delimited by vacant lines, which are lines containing
    no more than a prefix, suffix, and intervening spaces (see the Details
    section for a precise definition).

    Each output paragraph is generated from the corresponding input
    paragraph as follows:

     1. An optional prefix and/or suffix is removed from each input line.
     2. The remainder is divided into words (delimited by spaces).
     3. The words are joined into lines to make an eye-pleasing paragraph.
     4. The prefixes and suffixes are reattached.

     If there are suffixes, spaces are inserted before them so that they all
     end in the same column.


Terms

    body        A member of the set of characters defined by the PARBODY
    character   environment variable (see the Environment section).

    comprelen   The comprelen of a non-empty set of lines is the length of
                the longest string of non-body characters appearing at the
                beginning of every line in the set.

    comsuflen   Given a non-empty set <S> of lines, let <p> be the comprelen
                of <S>. Let <T> be the set of lines which result from
                stripping the first <p> characters from each line in <S>.
                Let <c> be the longest string of non-body characters
                appearing at the end of every line in <T>. Strip <c> of all
                initial spaces except the last. The length of <c> is the
                comsuflen of <S>.

    IP          Input paragraph.

    OP          Output paragraph.

    white       A space, formfeed, newline, carriage return, tab, or
    character   vertical tab.


Options

    Any command line argument may begin with one minus sign (-) which is
    ignored. Generally, more than one option may appear in a single command
    line argument, but there is one exception: the version option must have
    a whole argument all to itself.

    version     Causes all remaining arguments to be ignored. No input is
                read. "par 1.20" is printed on the output. Of course, this
                will change in future releases of Par.

    All remaining options are used to set values of variables. Values set by
    command line options hold for all paragraphs. Unset variables are given
    default values. Any unset variables whose default values depend on the
    IP are recomputed separately for each paragraph.

    The approximate role of each variable is described here. See the Details
    section for a much more complete and precise description.

    The first four variables, <hang>, <prefix>, <suffix>, and <width>, may
    be set to any unsigned decimal integer less than 10000.

    h[<hang>]   Mainly affects the default values of <prefix> and <suffix>.
                Defaults to 0. If the h option is given without a number,
                the value 1 is inferred. (See also the p and s options.)

    p<prefix>   The first <prefix> characters of each line of the OP
                are copied from the first <prefix> characters of the
                corresponding line of the IP. Defaults to 0 if there are
                less than <hang> + 2 lines in the IP. Otherwise, defaults to
                the comprelen of all the lines in the IP except the first
                <hang> of them. (See also the h option.)

    s<suffix>   The last <suffix> characters of each line of the OP
                are copied from the last <suffix> characters of the
                corresponding line of the IP. Defaults to 0 if there are
                less than <hang> + 2 lines in the IP. Otherwise, defaults to
                the comsuflen of all the lines of the IP except the first
                <hang> of them. (See also the h option.)

    w<width>    No line in the OP will contain more than <width> characters,
                not including the trailing newlines. Defaults to 72.

    The remaining five variables, <div>, <fit>, <just>, <last>, and
    <touch>, may be set to either 0 or 1. If the number is absent in the
    option, the value 1 is inferred.

    d[<div>]    If <div> is 1, then each block of text that would normally
                count as a paragraph (delimited by vacant lines) will be
                further subdivided into paragraphs as follows. Let <p> be
                the comprelen of all the lines in the block. Let a line's
                status be 1 if its (<p> + 1)st character is a space, 0
                otherwise. Every line in the block whose status is the same
                as the status of the first line will begin a new paragraph.
                Defaults to 0.

    f[<fit>]    If <fit> is 1 and <just> is 0, par will try to make the
                lines in the OP as nearly the same length as possible, even
                if it means making the OP narrower. Defaults to 0. (See also
                the j option.)

    j[<just>]   If <just> is 1, par justifies the OP, inserting spaces
                between words so that all lines in the OP have length
                <width> (except the last, if <last> is 0). <fit> has no
                effect if <just> is 1. Defaults to 0. (See also the w, l,
                and f options.)

    l[<last>]   If <last> is 1, par tries to make the last line of the OP
                about the same length as the others. Defaults to 0.

    t[<touch>]  Has no effect if <suffix> is 0 or <just> is 1. Otherwise,
                if <touch> is 0, all lines in the OP have length <width>.
                If <touch> is 1, then the length of the lines is decreased
                until the suffixes touch the body of the OP. Defaults to the
                logical OR of <fit> and <last>. (See also the s, j, w, f,
                and l options.)

    If the value of any variable is set more than once, the last value
    is used. When unset variables are assigned default values, <hang> is
    assigned before <prefix>, and <fit> and <last> are assigned before
    <touch> (because of the dependencies).

    It is an error if <width> <= <prefix> + <suffix>.


Environment

    PARINIT     If set, par will read command line options from PARINIT
                before it reads them from the command line.

    PARBODY     All and only the characters appearing in the value of
                PARBODY count as body characters (which are used for
                determining comprelens and comsuflens). The underscore is
                an escape character, which may begin the following escape
                sequences:

                   __ = an underscore
                   _s = a space
                   _A = all upper case characters
                   _a = all lower case characters
                   _0 = all decimal digits
                 _xhh = the character represented by the two hexadecimal
                        digits hh (which may be upper or lower case)

                If PARBODY is not set, there are no body characters.

                A good value for PARBODY might be "_a_A.", but it depends on
                the application.

    If a NUL character appears in the value of an environment variable, it
    and the rest of the string will not be seen by par.


Details

    Every white character in the input (unless it is a newline) is changed
    into a space immediately after it has been read. NUL characters in the
    input are invisible, just as if they weren't there at all.

    Lines are terminated by newline characters, but the newlines are not
    considered to be included in the lines. If the last character of the
    input is a non-newline, then a newline will be inferred immediately
    after it (but if the input is empty, no newline will be inferred; the
    number of input lines will be 0). Thus, the input can always be viewed
    as a sequence of lines.

    Vacant lines in the input are defined recursively by the following
    rules:

     1) Any line which is empty or contains only spaces is vacant.

     2) Suppose <A> and <B> are two vacant lines with at least two lines
        between them. Let <p> and <s> be the comprelen and comsuflen of
        the intervening lines. Any intervening line which, if stripped of
        its first <p> characters and last <s> characters, would be empty,
        or would contain only spaces, is vacant.

     3) If a line cannot be shown to be vacant by repeated application of
        rules 1 and 2, then it is not vacant.

    A subsequence of non-vacant lines in the input is called a block if
    there is no non-vacant line immediately above or below it (i.e., if it
    is maximal). If <div> is 0, then the IPs are exactly the blocks. If
    <div> is 1, then the IPs are the subdivisions of the blocks as described
    in the Options section in the entry for <div>.

    Each vacant line of the input is copied to the output unchanged except
    that any trailing spaces are stripped. The remainder of this section
    describes the process which is applied independently to each IP to
    construct the corresponding OP.

    After the values of the variables are determined (see the Options
    section), the first <prefix> characters and the last <suffix> characters
    of each input line are removed and remembered. It is an error for any
    line to contain fewer than <prefix> + <suffix> characters.

    The remaining text is treated as a sequence of characters, not lines.
    The text is broken into words, which are delimited by spaces. That is, a
    word is a maximal sub-sequence of non-spaces. If there is at least one
    word, and the first word is preceeded only by spaces, then the first
    word is expanded to include those spaces.

    Let <L> = <width> - <prefix> - <suffix>.

    Every word which contains more than <L> characters is broken, after each
    <L>th character, into multiple words.

    These words are reassembled, preserving their order, into lines. If
    <just> is 0, adjacent words within a line are separated by a single
    space, and line breaks are chosen so that the paragraph satisfies the
    following properties:

         1) No line contains more than <L> characters.

         2) If <fit> is 1, the difference between the lengths of the
            shortest and longest lines is as small as possible.

         3) The shortest line is as long as possible, subject to properties
            1 and 2.

         4) Let <target> be <L> if <fit> is 0, or the length of the longest
            line if <fit> is 1. The sum of the squares of the differences
            between <target> and the lengths of the lines is as small as
            possible, subject to properties 1, 2, and 3.

        If <last> is 0, then the last line does not count as a line for the
        purposes of properties 2, 3, and 4 above.

        If all the words fit on a single line, then the properties as worded
        above don't make much sense. In that case, no line breaks are
        inserted.

    If <just> is 1, then adjacent words within a line are separated by one
    space plus zero or more extra spaces, the value of <fit> is disregarded,
    and line breaks are chosen so that the paragraph satisfies the following
    properties:

         1) Every line contains exactly <L> characters.

         2) The largest inter-word gap is as small as possible, subject to
            property 1.

         3) The sum of the squares of the numbers of extra spaces required
            in each inter-word gap is as small as possible, subject to
            properties 1 and 2.

        If <last> is 0, then the last line does not count as a line for the
        purposes of property 1, and it does not require or contain any extra
        spaces.

        Extra spaces are distributed as uniformly as possible among the
        inter-word gaps in each line.

        Some paragraphs are impossible to justify, because they contain
        words too long relative to <L>. If this is the case, it is
        considered an error (see the Diagnostics section).

    If the number of lines in the resulting paragraph is less than <hang>,
    then empty lines are added at the end to bring the number of lines up to
    <hang>.

    If <just> is 0 and <touch> is 1, then <L> is changed to be the length of
    the longest line.

    If <suffix> is not 0, then each line is padded at the end with spaces to
    bring its length up to <L>.

    To each line is prepended <prefix> characters. Let <n> be the number of
    lines in the IP. The characters which are prepended to the <i>th line are
    chosen as follows:

     1) If <i> <= <n>, then the characters are copied from the ones that
        were removed from the beginning of the <n>th input line.

     2) If <i> > <n> > <hang>, then the characters are copied from the ones
        that were removed from the beginning of the last input line.

     3) If <i> > <n> and <n> <= <hang>, then the characters are all spaces.

    Then to each line is appended <suffix> characters. The characters which
    are appended to the <i>th line are chosen as follows:

     1) If <i> <= <n>, then the characters are copied from the ones that
        were removed from the end of the nth input line.

     2) If <i> > <n> > 0, then the characters are copied from the ones that
        were removed from the end of the last input line.

     3) If <n> = 0, then the characters are all spaces.

    Finally, the lines are printed to the output as the OP.


Diagnostics

    If there are no errors, par returns EXIT_SUCCESS (see <stdlib.h>).

    If there is an error, then an error message will be printed to the
    output, and par will return EXIT_FAILURE. If the error is local to a
    single paragraph, then the preceeding paragraphs will have been output
    before the error was detected. Line numbers in error messages are local
    to the IP in which the error occurred. All error messages begin with
    "par error:" on a line by itself.

    Of course, trying to print an error message would be futile if an error
    resulted from an output function, so par doesn't bother doing any error
    checking on output functions.


Examples

    The superiority of par's dynamic programming algorithm over a greedy
    algorithm (such as the one used by fmt) can be seen in the following
    example:

    Original paragraph:

        We the people of the United States,
        in order to form a more perfect union,
        establish justice,
        insure domestic tranquility,
        provide for the common defense,
        promote the general welfare,
        and secure the blessing of liberty
        to ourselves and our posterity,
        do ordain and establish the Constitution
        of the United States of America.

    After a greedy algorithm with width = 39:

        We the people of the United
        States, in order to form a more
        perfect union, establish
        establish justice, insure
        domestic tranquility, provide
        for the common defense, promote
        the general welfare, and secure
        the blessing of liberty to
        ourselves and our posterity, do
        ordain and establish the
        Constitution of the United
        States of America.

    After "par 39":

        We the people of the United    
        States, in order to form a     
        more perfect union, establish  
        justice, insure domestic       
        tranquility, provide for the   
        common defense, promote the    
        general welfare, and secure    
        the blessing of liberty to     
        ourselves and our posterity,   
        do ordain and establish the    
        Constitution of the United     
        States of America.             

    The line breaks chosen by par are clearly more eye-pleasing.

    par is most useful in conjunction with the text-filtering features of an
    editor, such as the ! commands of vi.

    The rest of this section is a series of before-and-after pictures
    showing some typical uses of par.

    Before:

        /*   We the people of the United States, */
        /* in order to form a more perfect union, */
        /* establish justice, */
        /* insure domestic tranquility, */
        /* provide for the common defense, */
        /* promote the general welfare, */
        /* and secure the blessing of liberty */
        /* to ourselves and our posterity, */
        /* do ordain and establish the Constitution */
        /* of the United States of America. */

    After "par 59":

        /*   We the people of the United States, in      */
        /* order to form a more perfect union, establish */
        /* justice, insure domestic tranquility, provide */
        /* for the common defense, promote the general   */
        /* welfare, and secure the blessing of liberty   */
        /* to ourselves and our posterity, do ordain     */
        /* and establish the Constitution of the United  */
        /* States of America.                            */

    Or after "par 59f":

        /*   We the people of the United States,  */
        /* in order to form a more perfect union, */
        /* establish justice, insure domestic     */
        /* tranquility, provide for the common    */
        /* defense, promote the general welfare,  */
        /* and secure the blessing of liberty to  */
        /* ourselves and our posterity, do ordain */
        /* and establish the Constitution of the  */
        /* United States of America.              */

    Or after "par 59l":

        /*   We the people of the United States, in      */
        /* order to form a more perfect union, establish */
        /* justice, insure domestic tranquility,         */
        /* provide for the common defense, promote       */
        /* the general welfare, and secure the           */
        /* blessing of liberty to ourselves and our      */
        /* posterity, do ordain and establish the        */
        /* Constitution of the United States of America. */

    Or after "par 59lf":

        /*   We the people of the United States,  */
        /* in order to form a more perfect union, */
        /* establish justice, insure domestic     */
        /* tranquility, provide for the common    */
        /* defense, promote the general welfare,  */
        /* and secure the blessing of liberty     */
        /* to ourselves and our posterity, do     */
        /* ordain and establish the Constitution  */
        /* of the United States of America.       */

    Or after "par 59lft0":

        /*   We the people of the United States,         */
        /* in order to form a more perfect union,        */
        /* establish justice, insure domestic            */
        /* tranquility, provide for the common           */
        /* defense, promote the general welfare,         */
        /* and secure the blessing of liberty            */
        /* to ourselves and our posterity, do            */
        /* ordain and establish the Constitution         */
        /* of the United States of America.              */

    Or after "par 59j":

        /*   We  the people  of  the  United States,  in */
        /* order to form a more perfect union, establish */
        /* justice, insure domestic tranquility, provide */
        /* for the  common defense, promote  the general */
        /* welfare, and  secure the blessing  of liberty */
        /* to ourselves and our posterity, do ordain and */
        /* establish  the  Constitution  of  the  United */
        /* States of America.                            */

    Or after "par 59jl":

        /*   We  the   people  of  the   United  States, */
        /* in   order    to   form   a    more   perfect */
        /* union,  establish  justice,  insure  domestic */
        /* tranquility, provide for  the common defense, */
        /* promote  the  general   welfare,  and  secure */
        /* the  blessing  of  liberty to  ourselves  and */
        /* our  posterity, do  ordain and  establish the */
        /* Constitution of the United States of America. */

    Before:

        Preamble      We the people of the United States,
        to the US     in order to form
        Constitution  a more perfect union,
                      establish justice,
                      insure domestic tranquility,
                      provide for the common defense,
                      promote the general welfare,
                      and secure the blessing of liberty
                      to ourselves and our posterity,
                      do ordain and establish
                      the Constitution
                      of the United States of America.

    After "par 52h3":

        Preamble      We the people of the United
        to the US     States, in order to form a
        Constitution  more perfect union, establish
                      justice, insure domestic
                      tranquility, provide for the
                      common defense, promote the
                      general welfare, and secure
                      the blessing of liberty to
                      ourselves and our posterity,
                      do ordain and establish the
                      Constitution of the United
                      States of America.

    Before:

         1  We the people of the United States,
         2  in order to form a more perfect union,
         3  establish justice,
         4  insure domestic tranquility,
         5  provide for the common defense,
         6  promote the general welfare,
         7  and secure the blessing of liberty
         8  to ourselves and our posterity,
         9  do ordain and establish the Constitution
        10  of the United States of America.

    After "par 59p12l":

         1  We the people of the United States, in order to
         2  form a more perfect union, establish justice,
         3  insure domestic tranquility, provide for the
         4  common defense, promote the general welfare,
         5  and secure the blessing of liberty to ourselves
         6  and our posterity, do ordain and establish the
         7  Constitution of the United States of America.

    Before:

        > >   We the people of the United States, in
        > > order to form a more perfect union,
        > >   Establish justice, ensure domestic
        > > tranquility, provide for the common defense,
        >
        >   Promote the general welfare, and secure
        > the blessing of liberty to ourselves and
        > our posterity,
        >   Do ordain and establish the Constitution
        > of the United States of America.

    After "par 42d":

        > >   We the people of the United
        > > States, in order to form a
        > > more perfect union,
        > >   Establish justice, ensure
        > > domestic tranquility, provide
        > > for the common defense,
        >
        >   Promote the general welfare,
        > and secure the blessing of
        > liberty to ourselves and our
        > posterity,
        >   Do ordain and establish the
        > Constitution of the United
        > States of America.


Limitations

    If you like two spaces between sentences, too bad. Differentiating
    between periods that end sentences and periods used in abbreviations is
    a complex problem beyond the scope of this simple filter. Consider the
    following tough case:

        I calc'd the approx.
        Fermi level to 3 sig. digits.

    Suppose that that should be reformatted to:

        I calc'd the approx. Fermi
        level to three sig. digits.

    The program has to decide whether to put 1 or 2 spaces between "approx."
    and "Fermi". There is no obvious hint from the original paragraph
    because there was a line break between them, and "Fermi" begins with a
    capital letter. The program would apparently have to understand English
    grammar to determine that the sentence does not end there (and then it
    would only work for English text).

    If you use tabs, you probably won't like the way par handles (or doesn't
    handle) them. It turns them into spaces. I didn't bother trying to
    make sense of tabs because they don't make sense to begin with. Not
    everyone's terminal has the same tab settings, so text files containing
    tabs are sometimes mangled. In fact, almost every text file containing
    tabs gets mangled when something is inserted at the beginning of each
    line (when quoting e-mail or commenting out a section of a shell script,
    for example), making them a pain to edit. In my opinion, the world would
    be a nicer place if everyone stopped using tabs (so I'm doing my part by
    not supporting them in par.)

    There is currently no way for the length of the output prefix to differ
    from the length of the input prefix. Ditto for the suffix. I may
    consider adding this capability in a future release, but right now I'm
    not sure how I'd want it to work.


Bugs

    If I knew of any bugs, I wouldn't release the package. Of course, there
    may be bugs that I haven't yet discovered.

    If you find any bugs, or if you have any suggestions, please send e-mail
    to:

        amc@ecl.wustl.edu

    or send paper mail to:

        Adam M. Costello
        Campus Box 1045
        Washington University
        One Brookings Dr.
        St. Louis, MO 63130
        USA

    Note that both addresses could change anytime after June 1994.

    When reporting a bug, please include the exact input and command line
    options used, and the version number of par, so that I can reproduce it.
